# coding: utf-8

"""
    finAPI Access V2

    <strong>RESTful API for Account Information Services (AIS) and Payment Initiation Services (PIS)</strong> <br/> <strong>Application Version:</strong> 2.38.0 <br/>  The following pages give you some general information on how to use our APIs.<br/> The actual API services documentation then follows further below. You can use the menu to jump between API sections. <br/> <br/> This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button. <br/>  <h2 id=\"general-information\">General information</h2>  <h3 id=\"general-error-responses\"><strong>Error Responses</strong></h3> When an API call returns with an error, then in general it has the structure shown in the following example:  <pre> {   \"errors\": [     {       \"message\": \"Interface 'FINTS_SERVER' is not supported for this operation.\",       \"code\": \"BAD_REQUEST\",       \"type\": \"TECHNICAL\"     }   ],   \"date\": \"2020-11-19T16:54:06.854+01:00\",   \"requestId\": \"selfgen-312042e7-df55-47e4-bffd-956a68ef37b5\",   \"endpoint\": \"POST /api/v2/bankConnections/import\",   \"authContext\": \"1/21\",   \"bank\": \"DEMO0002 - finAPI Test Redirect Bank (id: 280002, location: none)\" } </pre>  If an API call requires an additional authentication by the user, HTTP code 510 is returned and the error response contains the additional \"multiStepAuthentication\" object, see the following example:  <pre> {   \"errors\": [     {       \"message\": \"Es ist eine zusätzliche Authentifizierung erforderlich. Bitte geben Sie folgenden Code an: 123456\",       \"code\": \"ADDITIONAL_AUTHENTICATION_REQUIRED\",       \"type\": \"BUSINESS\",       \"multiStepAuthentication\": {         \"hash\": \"678b13f4be9ed7d981a840af8131223a\",         \"status\": \"CHALLENGE_RESPONSE_REQUIRED\",         \"challengeMessage\": \"Es ist eine zusätzliche Authentifizierung erforderlich. Bitte geben Sie folgenden Code an: 123456\",         \"answerFieldLabel\": \"TAN\",         \"redirectUrl\": null,         \"redirectContext\": null,         \"redirectContextField\": null,         \"twoStepProcedures\": null,         \"photoTanMimeType\": null,         \"photoTanData\": null,         \"opticalData\": null,         \"opticalDataAsReinerSct\": false       }     }   ],   \"date\": \"2019-11-29T09:51:55.931+01:00\",   \"requestId\": \"selfgen-45059c99-1b14-4df7-9bd3-9d5f126df294\",   \"endpoint\": \"POST /api/v2/bankConnections/import\",   \"authContext\": \"1/18\",   \"bank\": \"DEMO0001 - finAPI Test Bank\" } </pre>  An exception to this error format are API authentication errors, where the following structure is returned:  <pre> {   \"error\": \"invalid_token\",   \"error_description\": \"Invalid access token: cccbce46-xxxx-xxxx-xxxx-xxxxxxxxxx\" } </pre>  <h3 id=\"general-paging\"><strong>Paging</strong></h3> API services that may potentially return a lot of data implement paging. They return a limited number of entries within a \"page\". Further entries must be fetched with subsequent calls. <br/><br/> Any API service that implements paging provides the following input parameters:<br/> &bull; \"page\": the number of the page to be retrieved (starting with 1).<br/> &bull; \"perPage\": the number of entries within a page. The default and maximum value is stated in the documentation of the respective services.  A paged response contains an additional \"paging\" object with the following structure:  <pre> {   ...   ,   \"paging\": {     \"page\": 1,     \"perPage\": 20,     \"pageCount\": 234,     \"totalCount\": 4662   } } </pre>  <h3 id=\"general-internationalization\"><strong>Internationalization</strong></h3> The finAPI services support internationalization which means you can define the language you prefer for API service responses. <br/><br/> The following languages are available: German, English, Czech, Slovak. <br/><br/> The preferred language can be defined by providing the official HTTP <strong>Accept-Language</strong> header. <br/><br/> finAPI reacts on the official iso language codes &quot;de&quot;, &quot;en&quot;, &quot;cs&quot; and &quot;sk&quot; for the named languages. Additional subtags supported by the Accept-Language header may be provided, e.g. &quot;en-US&quot;, but are ignored. <br/> If no Accept-Language header is given, German is used as the default language. <br/><br/> Exceptions:<br/> &bull; Bank login hints and login fields are only available in the language of the bank and not being translated.<br/> &bull; Direct messages from the bank systems typically returned as BUSINESS errors will not be translated.<br/> &bull; BUSINESS errors created by finAPI directly are available in German and English.<br/> &bull; TECHNICAL errors messages meant for developers are mostly in English, but also may be translated.  <h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3> With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error. <br/><br/> If you don't pass a request ID for a call, finAPI will generate a random ID internally. <br/><br/> The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\". <br/><br/> We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response (especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.  <h3 id=\"general-overriding-http-methods\"><strong>Overriding HTTP methods</strong></h3> Some HTTP clients do not support the HTTP methods PATCH or DELETE. If you are using such a client in your application, you can use a POST request instead with a special HTTP header indicating the originally intended HTTP method. <br/><br/> The header's name is <strong>X-HTTP-Method-Override</strong>. Set its value to either <strong>PATCH</strong> or <strong>DELETE</strong>. POST Requests having this header set will be treated either as PATCH or DELETE by the finAPI servers. <br/><br/> Example: <br/><br/> <strong>X-HTTP-Method-Override: PATCH</strong><br/> POST /api/v2/label/51<br/> {\"name\": \"changed label\"}<br/><br/> will be interpreted by finAPI as:<br/><br/> PATCH /api/v2/label/51<br/> {\"name\": \"changed label\"}<br/>  <h3 id=\"general-user-metadata\"><strong>User metadata</strong></h3> With the migration to PSD2 APIs, a new term called \"User metadata\" (also known as \"PSU metadata\") has been introduced to the API. This user metadata aims to inform the banking API if there was a real end-user behind an HTTP request or if the request was triggered by a system (e.g. by an automatic batch update). In the latter case, the bank may apply some restrictions such as limiting the number of HTTP requests for a single consent. Also, some operations may be forbidden entirely by the banking API. For example, some banks do not allow issuing a new consent without the end-user being involved. Therefore, it is certainly necessary and obligatory for the customer to provide the PSU metadata for such operations. <br/><br/> As finAPI does not have direct interaction with the end-user, it is the client application's responsibility to provide all the necessary information about the end-user. This must be done by sending additional headers with every request triggered on behalf of the end-user. <br/><br/> At the moment, the following headers are supported by the API:<br/> &bull; \"PSU-IP-Address\" - the IP address of the user's device. It has to be an IPv4 address, as some banks cannot work with IPv6 addresses. If a non-IPv4 address is passed, we will replace the value with our own IPv4 address as a fallback.<br/> &bull; \"PSU-Device-OS\" - the user's device and/or operating system identification.<br/> &bull; \"PSU-User-Agent\" - the user's web browser or other client device identification.  <h3 id=\"general-faq\"><strong>FAQ</strong></h3> <strong>Is there a finAPI SDK?</strong> <br/> Currently we do not offer a native SDK, but there is the option to generate an SDK for almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation. <br/> <br/> <strong>How can I enable finAPI's automatic batch update?</strong> <br/> Currently there is no way to set up the batch update via the API. Please contact support@finapi.io for this. <br/> <br/> <strong>Why do I need to keep authorizing when calling services on this page?</strong> <br/> This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist. 

    The version of the OpenAPI document: 2024.18.1
    Contact: kontakt@finapi.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from finapi_access.models.account_type import AccountType
from finapi_access.models.category import Category
from finapi_access.models.enabled_products import EnabledProducts
from finapi_access.models.mandator_license import MandatorLicense
from finapi_access.models.preferred_consent_type import PreferredConsentType
from finapi_access.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

class ClientConfiguration(BaseModel):
    """
    Client configuration parameters
    """ # noqa: E501
    pfm_services_enabled: StrictBool = Field(description="Whether your client is allowed to call PFM services (Personal Finance Management). The set of PFM services is the following:<br/><br/>&bull; all /mandatorAdmin/ibanRules/* and /mandatorAdmin/keywordRules/* services<br/>&bull; GET /accounts/dailyBalances<br/>&bull; all /transactions/* services, except for GET /transactions/[id(s)] and DELETE /transactions/[id]<br/>&bull; all /categories/* services, except for GET /categories/[id(s)]<br/>&bull; all /labels/* services<br/>&bull; all /notificationRules/* services<br/>&bull; all /tests/* services", alias="pfmServicesEnabled")
    is_automatic_batch_update_enabled: StrictBool = Field(description="Whether finAPI performs a regular automatic update of your users' bank connections. To find out how the automatic batch update is configured for your client, i.e. which bank connections get updated, and at which time and interval, please contact your Sys-Admin. Note that even if the automatic batch update is enabled for your client, individual users can still disable the feature for their own bank connections. Also, note that batch updates run only when you have AIS enabled (see 'aisEnabled' flag).", alias="isAutomaticBatchUpdateEnabled")
    is_development_mode_enabled: StrictBool = Field(description="Whether development mode is enabled. This setting is enabled on mandator level and allows any user to access the 'Mock batch update' service. <br/><br/>NOTE: This flag is meant for testing purposes during development of your application. <br/>This is why this will never be enabled on a production environment.", alias="isDevelopmentModeEnabled")
    is_non_euro_accounts_supported: StrictBool = Field(description="Whether finAPI will download data (balance and transactions) for bank accounts with a currency other than EUR (affects all users). If this flag is false, then non-EUR accounts will still be returned in the account list, but they will have no balance and no transactions. Note that this currently applies to Checking accounts only.", alias="isNonEuroAccountsSupported")
    is_auto_categorization_enabled: StrictBool = Field(description="Whether transactions will be categorized as soon as they are downloaded. <br/>In case this flag is false, the user needs to manually trigger categorization using the 'Trigger categorization' service.", alias="isAutoCategorizationEnabled")
    mandator_license: MandatorLicense = Field(description="The license associated with your client. <br/>The licensing model affects the TPP registration data used to connect to the bank (e.g. <b>finTSProductRegistrationNumber</b> for FINTS_SERVER interface). Licenses are administered by finAPI. Please contact the support to change the license that was set up for you.<br/>Possible values are:<br/>UNLICENSED: finAPI will use its own TPP registration to connect to the bank for both account information services (AIS) and payment initiation services (PIS).<br/>AISP: finAPI will use its own TPP registration to connect to the bank for PIS, and your registration for AIS.<br/>PISP: finAPI will use its own TPP registration to connect to the bank for AIS, and your registration for PIS.<br/>FULLY_LICENSED: finAPI will use your TPP registration to connect to the bank for both AIS and PIS.<br/> <strong>Type:</strong> MandatorLicense", alias="mandatorLicense")
    preferred_consent_type: PreferredConsentType = Field(description="The preferred consent type that will be used for the XS2A interface.<br/><br/>&bull; <b>ONETIME</b> - The consent can only be used once to download data associated with the account. The consent won’t be saved by finAPI.<br/>&bull; <b>RECURRING</b> - The consent is valid for up to 90 days and can be used by finAPI to access and download account data for up to 4 times per day.<br/><br/>NOTE: If the bank does not support the preferred consent type, then finAPI will default to the other type.<br/> <strong>Type:</strong> PreferredConsentType", alias="preferredConsentType")
    user_notification_callback_url: Optional[StrictStr] = Field(default=None, description="Callback URL to which finAPI sends the notification messages that are triggered from the automatic batch update of the users' bank connections. This field is only relevant if the automatic batch update is enabled for your client. For details about what the notification messages look like, please see the documentation in the 'Notification Rules' section. finAPI will call this URL with HTTP method POST. Note that the response of the call is not processed by finAPI. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.", alias="userNotificationCallbackUrl")
    user_synchronization_callback_url: Optional[StrictStr] = Field(default=None, description="Callback URL for user synchronization. This field should be set if you - as a finAPI customer - have multiple clients using finAPI. In such case, all of your clients will share the same user base, making it possible for a user to be created in one client, but then deleted in another. To keep the client-side user data consistent in all clients, you should set a callback URL for each client. finAPI will send a notification to the callback URL of each client whenever a user of your user base gets deleted. Note that finAPI will send a deletion notification to ALL clients, including the one that made the user deletion request to finAPI. So when deleting a user in finAPI, a client should rely on the callback to delete the user on its own side. <p>The notification that finAPI sends to the clients' callback URLs will be a POST request, with this body: <pre>{    \"userId\" : string // contains the identifier of the deleted user    \"event\" : string // this will always be \"DELETED\" }</pre><br/>Note that finAPI does not process the response of this call. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.</p>As long as you have just one client, you can ignore this field and let it be null. However keep in mind that in this case your client will not receive any callback when a user gets deleted - so the deletion of the user on the client-side must not be forgotten. Of course you may still use the callback URL even for just one client, if you want to implement the deletion of the user on the client-side via the callback from finAPI.", alias="userSynchronizationCallbackUrl")
    refresh_tokens_validity_period: StrictInt = Field(description="The validity period that newly requested refresh tokens initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation, or when a user gets locked, or when the password is reset for a user).", alias="refreshTokensValidityPeriod")
    user_access_tokens_validity_period: StrictInt = Field(description="The validity period that newly requested access tokens for users initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation, or when a user gets locked, or when the password is reset for a user).", alias="userAccessTokensValidityPeriod")
    client_access_tokens_validity_period: StrictInt = Field(description="The validity period that newly requested access tokens for clients initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation).", alias="clientAccessTokensValidityPeriod")
    max_user_login_attempts: StrictInt = Field(description="Number of consecutive failed login attempts of a user into his finAPI account that is allowed before finAPI locks the user's account. When a user's account is locked, finAPI will invalidate all user's tokens and it will deny any service call in the context of this user (i.e. any call to a service using one of the user's authorization tokens, as well as the service for requesting a new token for this user). To unlock a user's account, a new password must be set for the account by the client (see the services /users/requestPasswordChange and /users/executePasswordChange). Once a new password has been set, all services will be available again for this user and the user's failed login attempts counter is reset to 0. The user's failed login attempts counter is also reset whenever a new authorization token has been successfully retrieved, or whenever the user himself changes his password.<br/><br/>Note that when this field has a value of 0, it means that there is no limit for user login attempts, i.e. finAPI will never lock user accounts.", alias="maxUserLoginAttempts")
    transaction_import_limitation: StrictInt = Field(description="This setting defines the upper limit of how much of an account's transactions history may get downloaded whenever a new account is imported, across all of your users. More technically, it depicts the maximum number of days for which transactions might get downloaded, starting from - and including - the date of the account import. '0' means that there is no limitation.", alias="transactionImportLimitation")
    is_user_auto_verification_enabled: StrictBool = Field(description="Whether users that are created with this client are automatically verified on creation. If this field is set to 'false', then any user that is created with this client must first be verified with the \"Verify a user\" service before he can be authorized. If the field is 'true', then no verification is required by the client and the user can be authorized immediately after creation.", alias="isUserAutoVerificationEnabled")
    is_mandator_admin: StrictBool = Field(description="Whether this client is a 'Mandator Admin'. Mandator Admins are special clients that can access the 'Mandator Administration' section of finAPI. If you do not yet have credentials for a Mandator Admin, please contact us at support@finapi.io. For further information, please refer to <a href='https://documentation.finapi.io/access/application-management' target='_blank'>this page</a> on our Access Public Documentation.", alias="isMandatorAdmin")
    is_web_scraping_enabled: StrictBool = Field(description="Whether finAPI is allowed to use the WEB_SCRAPER interface for data download or payments. <br/><br/>If this field is set to 'true', then finAPI might download data from the online banking websites of banks (either in addition to other interfaces, or as the sole data source for the download). Also, it will be possible to do payments via the WEB_SCRAPER interface.<br/><br/>If this field is set to 'false', then finAPI will not use any web scrapers. Payments via the WEB_SCRAPER interface will not be possible, and finAPI will not allow any data download for banks where no other interface except WEB_SCRAPER is available. <br/><br/>Please contact your Sys-Admin if you want to change this setting.", alias="isWebScrapingEnabled")
    ais_enabled: StrictBool = Field(description="Whether this client is allowed to do AIS (Account Information Services). This setting must be enabled for doing bank connection imports or updates (including finAPI's automatic batch updates), or calling other AIS endpoints that relate to bank connections, accounts, or transactions/security positions.", alias="aisEnabled")
    payments_enabled: StrictBool = Field(description="Whether this client is allowed to do PIS (Payment Initiation Services). This setting must be enabled for doing money transfers, direct debits, and standing orders for imported accounts.<br/><br/>Note that on the Sandbox environment, it is always possible to execute these services regardless of what this field says, as long as you are using a test bank (see <code>Bank.isTestBank</code>)", alias="paymentsEnabled")
    is_standalone_payments_enabled: StrictBool = Field(description="Whether this client is allowed to do standalone PIS (doing money transfers and standing orders for accounts that are not imported in finAPI).<br/><br/>Note that on the Sandbox environment, it is always possible to execute these services regardless of what this field says, as long as you are using a test bank (see <code>Bank.isTestBank</code>)", alias="isStandalonePaymentsEnabled")
    available_bank_groups: List[StrictStr] = Field(description="List of bank groups that are available to this client. A bank group is a collection of all banks that are located in a certain country, and is defined by the country's ISO 3166 ALPHA-2 code (see also field 'location' of Bank resource). If you want to extend or limit the available bank groups for your client, please contact your Sys-Admin.<br/><br/>Note: There is no bank group for international institutes (i.e. institutes that are not bound to any specific country). Instead, those institutes are always available. If this list is empty, it means that ONLY international institutes are available.", alias="availableBankGroups")
    products: List[Product] = Field(description="THIS FIELD IS DEPRECATED AND WILL BE REMOVED.<br/>Please refer to the 'enabledProducts' field instead.<br/><br/>List of finAPI products that are available to this client. Newly added products won't be represented within this field, but only in the new 'enabledProducts' field.<br/> <strong>Type:</strong> Product")
    enabled_products: EnabledProducts = Field(alias="enabledProducts")
    fin_ts_product_registration_number: Optional[StrictStr] = Field(default=None, description="The FinTS product registration number. If a value is stored, this will always be 'XXXXX'.", alias="finTSProductRegistrationNumber")
    ais_via_web_form: StrictBool = Field(description="Whether you must use finAPI's Web Form for Account Information Services. See: https://documentation.finapi.io/webform", alias="aisViaWebForm")
    pis_via_web_form: StrictBool = Field(description="Whether you must use finAPI's Web Form for Standard Payment Initiation Services (Payments for accounts that have been imported in finAPI). See: https://documentation.finapi.io/webform", alias="pisViaWebForm")
    pis_standalone_via_web_form: StrictBool = Field(description="Whether you must use finAPI's Web Form for Standalone Payment Initiation Services (Payments without account import). See: https://documentation.finapi.io/webform", alias="pisStandaloneViaWebForm")
    beta_banks_enabled: StrictBool = Field(description="Whether the set of banks that are available to your client contains \"Beta banks\". Beta banks provide pre-release interfaces that are still in a beta phase. Communication to the bank via such interfaces might be unstable, and the correctness and/or quality of data delivery or payment execution cannot be guaranteed.<br/>As the word \"BETA\" already indicates, Beta banks are subject to changes. Their properties, as well as their behaviour can change based on continuous tests and customer feedback. Also, to keep our bank list clean, we might remove Beta banks at any point in time, including all related user data (bank connections, accounts, transactions etc). We still recommend you to enable beta banks in your application, because it enables us to release a stable interface faster. However, you should point it out to your users when using a beta bank (also see field Bank.isBeta).<br/><br/>If this field is true, then the GET /banks services will include beta banks in their results, and you can use beta banks in any service where you can pass a bank identifier. If the field is false, then beta banks will not exist for your client.", alias="betaBanksEnabled")
    category_restrictions_enabled: StrictBool = Field(description="Whether category restrictions are applied to your client. If true, transaction access is restricted to the categories contained in the ‘categoryRestrictions’ list. If false, then there are no restrictions for your client, and you may retrieve the full set of imported transactions.", alias="categoryRestrictionsEnabled")
    category_restrictions: List[Category] = Field(description="Defines the set of transaction categories to which your client is restricted. This field is only relevant if the 'categoryRestrictionsEnabled' flag is set to true. In this case, when retrieving transactions (via the GET /transactions services), you may request only those transactions whose 'category' is one of the listed categories. If the set is empty, you won’t be able to access any transactions.<br/> <strong>Type:</strong> Category", alias="categoryRestrictions")
    account_type_restrictions: List[AccountType] = Field(description="The set of account types to which your client is restricted. You can only import or update accounts that match one of the listed types. For more information, refer to the <code>accountTypes</code> field of the services:<br/>&bull; bankConnections/import<br/>&bull; bankConnections/update<br/>&bull; bankConnections/connectInterface<br/><br/>If this set is empty, then your client has no account type limitations.<br/> <strong>Type:</strong> AccountType", alias="accountTypeRestrictions")
    cors_allowed_origins: Optional[List[StrictStr]] = Field(default=None, description="The list of allowed origins for cross-origin requests. The CORS configuration applies to all the API services except for the /oauth services. If this list is empty, then CORS is not enabled for this client. Please contact the support if you want to enable or change the client's CORS configuration.", alias="corsAllowedOrigins")
    __properties: ClassVar[List[str]] = ["pfmServicesEnabled", "isAutomaticBatchUpdateEnabled", "isDevelopmentModeEnabled", "isNonEuroAccountsSupported", "isAutoCategorizationEnabled", "mandatorLicense", "preferredConsentType", "userNotificationCallbackUrl", "userSynchronizationCallbackUrl", "refreshTokensValidityPeriod", "userAccessTokensValidityPeriod", "clientAccessTokensValidityPeriod", "maxUserLoginAttempts", "transactionImportLimitation", "isUserAutoVerificationEnabled", "isMandatorAdmin", "isWebScrapingEnabled", "aisEnabled", "paymentsEnabled", "isStandalonePaymentsEnabled", "availableBankGroups", "products", "enabledProducts", "finTSProductRegistrationNumber", "aisViaWebForm", "pisViaWebForm", "pisStandaloneViaWebForm", "betaBanksEnabled", "categoryRestrictionsEnabled", "categoryRestrictions", "accountTypeRestrictions", "corsAllowedOrigins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of enabled_products
        if self.enabled_products:
            _dict['enabledProducts'] = self.enabled_products.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in category_restrictions (list)
        _items = []
        if self.category_restrictions:
            for _item in self.category_restrictions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categoryRestrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pfmServicesEnabled": obj.get("pfmServicesEnabled"),
            "isAutomaticBatchUpdateEnabled": obj.get("isAutomaticBatchUpdateEnabled"),
            "isDevelopmentModeEnabled": obj.get("isDevelopmentModeEnabled"),
            "isNonEuroAccountsSupported": obj.get("isNonEuroAccountsSupported"),
            "isAutoCategorizationEnabled": obj.get("isAutoCategorizationEnabled"),
            "mandatorLicense": obj.get("mandatorLicense"),
            "preferredConsentType": obj.get("preferredConsentType"),
            "userNotificationCallbackUrl": obj.get("userNotificationCallbackUrl"),
            "userSynchronizationCallbackUrl": obj.get("userSynchronizationCallbackUrl"),
            "refreshTokensValidityPeriod": obj.get("refreshTokensValidityPeriod"),
            "userAccessTokensValidityPeriod": obj.get("userAccessTokensValidityPeriod"),
            "clientAccessTokensValidityPeriod": obj.get("clientAccessTokensValidityPeriod"),
            "maxUserLoginAttempts": obj.get("maxUserLoginAttempts"),
            "transactionImportLimitation": obj.get("transactionImportLimitation"),
            "isUserAutoVerificationEnabled": obj.get("isUserAutoVerificationEnabled"),
            "isMandatorAdmin": obj.get("isMandatorAdmin"),
            "isWebScrapingEnabled": obj.get("isWebScrapingEnabled"),
            "aisEnabled": obj.get("aisEnabled"),
            "paymentsEnabled": obj.get("paymentsEnabled"),
            "isStandalonePaymentsEnabled": obj.get("isStandalonePaymentsEnabled"),
            "availableBankGroups": obj.get("availableBankGroups"),
            "products": obj.get("products"),
            "enabledProducts": EnabledProducts.from_dict(obj["enabledProducts"]) if obj.get("enabledProducts") is not None else None,
            "finTSProductRegistrationNumber": obj.get("finTSProductRegistrationNumber"),
            "aisViaWebForm": obj.get("aisViaWebForm"),
            "pisViaWebForm": obj.get("pisViaWebForm"),
            "pisStandaloneViaWebForm": obj.get("pisStandaloneViaWebForm"),
            "betaBanksEnabled": obj.get("betaBanksEnabled"),
            "categoryRestrictionsEnabled": obj.get("categoryRestrictionsEnabled"),
            "categoryRestrictions": [Category.from_dict(_item) for _item in obj["categoryRestrictions"]] if obj.get("categoryRestrictions") is not None else None,
            "accountTypeRestrictions": obj.get("accountTypeRestrictions"),
            "corsAllowedOrigins": obj.get("corsAllowedOrigins")
        })
        return _obj


