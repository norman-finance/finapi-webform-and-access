# coding: utf-8

"""
    finAPI Web Form 2.0

    The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

    The version of the OpenAPI document: 2.709.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from finapi_web_form.models.translation import Translation
from typing import Optional, Set
from typing_extensions import Self

class CreateTranslationDetails(BaseModel):
    """
    CreateTranslationDetails
    """ # noqa: E501
    cs: Optional[Translation] = None
    de: Optional[Translation] = None
    en: Optional[Translation] = None
    es: Optional[Translation] = None
    fr: Optional[Translation] = None
    it: Optional[Translation] = None
    nl: Optional[Translation] = None
    pl: Optional[Translation] = None
    ro: Optional[Translation] = None
    sk: Optional[Translation] = None
    tr: Optional[Translation] = None
    __properties: ClassVar[List[str]] = ["cs", "de", "en", "es", "fr", "it", "nl", "pl", "ro", "sk", "tr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTranslationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cs
        if self.cs:
            _dict['cs'] = self.cs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of de
        if self.de:
            _dict['de'] = self.de.to_dict()
        # override the default output from pydantic by calling `to_dict()` of en
        if self.en:
            _dict['en'] = self.en.to_dict()
        # override the default output from pydantic by calling `to_dict()` of es
        if self.es:
            _dict['es'] = self.es.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fr
        if self.fr:
            _dict['fr'] = self.fr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of it
        if self.it:
            _dict['it'] = self.it.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nl
        if self.nl:
            _dict['nl'] = self.nl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pl
        if self.pl:
            _dict['pl'] = self.pl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ro
        if self.ro:
            _dict['ro'] = self.ro.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sk
        if self.sk:
            _dict['sk'] = self.sk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tr
        if self.tr:
            _dict['tr'] = self.tr.to_dict()
        # set to None if cs (nullable) is None
        # and model_fields_set contains the field
        if self.cs is None and "cs" in self.model_fields_set:
            _dict['cs'] = None

        # set to None if de (nullable) is None
        # and model_fields_set contains the field
        if self.de is None and "de" in self.model_fields_set:
            _dict['de'] = None

        # set to None if en (nullable) is None
        # and model_fields_set contains the field
        if self.en is None and "en" in self.model_fields_set:
            _dict['en'] = None

        # set to None if es (nullable) is None
        # and model_fields_set contains the field
        if self.es is None and "es" in self.model_fields_set:
            _dict['es'] = None

        # set to None if fr (nullable) is None
        # and model_fields_set contains the field
        if self.fr is None and "fr" in self.model_fields_set:
            _dict['fr'] = None

        # set to None if it (nullable) is None
        # and model_fields_set contains the field
        if self.it is None and "it" in self.model_fields_set:
            _dict['it'] = None

        # set to None if nl (nullable) is None
        # and model_fields_set contains the field
        if self.nl is None and "nl" in self.model_fields_set:
            _dict['nl'] = None

        # set to None if pl (nullable) is None
        # and model_fields_set contains the field
        if self.pl is None and "pl" in self.model_fields_set:
            _dict['pl'] = None

        # set to None if ro (nullable) is None
        # and model_fields_set contains the field
        if self.ro is None and "ro" in self.model_fields_set:
            _dict['ro'] = None

        # set to None if sk (nullable) is None
        # and model_fields_set contains the field
        if self.sk is None and "sk" in self.model_fields_set:
            _dict['sk'] = None

        # set to None if tr (nullable) is None
        # and model_fields_set contains the field
        if self.tr is None and "tr" in self.model_fields_set:
            _dict['tr'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTranslationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cs": Translation.from_dict(obj["cs"]) if obj.get("cs") is not None else None,
            "de": Translation.from_dict(obj["de"]) if obj.get("de") is not None else None,
            "en": Translation.from_dict(obj["en"]) if obj.get("en") is not None else None,
            "es": Translation.from_dict(obj["es"]) if obj.get("es") is not None else None,
            "fr": Translation.from_dict(obj["fr"]) if obj.get("fr") is not None else None,
            "it": Translation.from_dict(obj["it"]) if obj.get("it") is not None else None,
            "nl": Translation.from_dict(obj["nl"]) if obj.get("nl") is not None else None,
            "pl": Translation.from_dict(obj["pl"]) if obj.get("pl") is not None else None,
            "ro": Translation.from_dict(obj["ro"]) if obj.get("ro") is not None else None,
            "sk": Translation.from_dict(obj["sk"]) if obj.get("sk") is not None else None,
            "tr": Translation.from_dict(obj["tr"]) if obj.get("tr") is not None else None
        })
        return _obj


