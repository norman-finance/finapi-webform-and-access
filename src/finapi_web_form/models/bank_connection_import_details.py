# coding: utf-8

"""
    finAPI Web Form 2.0

    The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

    The version of the OpenAPI document: 2.709.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from finapi_web_form.models.account_type import AccountType
from finapi_web_form.models.callbacks import Callbacks
from finapi_web_form.models.import_bank_details import ImportBankDetails
from typing import Optional, Set
from typing_extensions import Self

class BankConnectionImportDetails(BaseModel):
    """
    BankConnectionImportDetails
    """ # noqa: E501
    bank: Optional[ImportBankDetails] = None
    bank_connection_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Custom name for the bank connection", alias="bankConnectionName")
    skip_balances_download: Optional[StrictBool] = Field(default=False, description="Whether to skip the download of balances or not. May only be set to true if <code>skipPositionsDownload</code> is also true. <br/>This parameter refers to the same parameter of the \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/import'>Import a new bank connection</a>\" service in the finAPI Access API.", alias="skipBalancesDownload")
    skip_positions_download: Optional[StrictBool] = Field(default=False, description="Whether to skip the download of transactions and securities or not.<br/>This parameter refers to the same parameter of the \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/import'>Import a new bank connection</a>\" service in the finAPI Access API.", alias="skipPositionsDownload")
    load_owner_data: Optional[StrictBool] = Field(default=False, description="Whether to load information about the bank connection owner(s).<br/>This parameter refers to the same parameter of the \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/import'>Import a new bank connection</a>\" service in the finAPI Access API.", alias="loadOwnerData")
    max_days_for_download: Optional[Annotated[int, Field(le=3650, strict=True)]] = Field(default=0, description="Defines the limit of how many days of the transaction history will be requested from the bank.<br/>This parameter refers to the same parameter of the \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/import'>Import a new bank connection</a>\" service in the finAPI Access API.", alias="maxDaysForDownload")
    account_types: Optional[List[AccountType]] = Field(default=None, description="A set of account types that are considered for the import. If no values is given, then all accounts will be imported.<br/>This parameter refers to the same parameter of the \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/import'>Import a new bank connection</a>\" service in the finAPI Access API.", alias="accountTypes")
    allowed_interfaces: Optional[List[StrictStr]] = Field(default=None, description="Restricts the set of interfaces the end user can import with the web form.  If either the `bank.id` or `bank.search` is given, the interfaces of the given bank will be immediately filtered according to the given `allowedInterfaces` parameter. If neither `bank.id` nor `bank.search` is provided within the request, the parameter restricts the bank selection on the web form to the given interfaces.  Use with caution in pair with the `accountTypes` parameter as some combinations might end up in a web form not being able to get any accounts from the bank. For example, requesting only `Checking` accounts (parameter `accountTypes`) but limiting interfaces to `WEB_SCRAPER` (parameter `allowedInterfaces`) will most likely result in a web form failing with the `NO_ACCOUNTS_FOR_TYPE_LIST` error code.", alias="allowedInterfaces")
    callbacks: Optional[Callbacks] = None
    profile_id: Optional[Annotated[str, Field(min_length=36, strict=True, max_length=36)]] = Field(default=None, description="The profile to be applied to the web form.<br/>This will overwrite the default profile, if such a profile exists.", alias="profileId")
    redirect_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2048)]] = Field(default=None, description="The URL where the end-user will be redirected to after completing the bank login and (possibly) the SCA on the bank's website. Must always be provided by mandators with <code>FULLY_LICENSED</code> or <code>AISP</code> license type, and may not be provided by mandators with other license types. Find more info in the <a target='_blank' href='https://documentation.finapi.io/webform/Licensed-customers-using-the-Web-Form.2832302195.html'>Web Form 2.0 Public Documentation</a>.<br/><br/><strong>NOTE:</strong> Please note that this URL is used during the bank authentication flow. If you would like to provide a URL to which the end user will get redirected at the <strong>end of the web form flow</strong>, please check out the <a href='https://documentation.finapi.io/webform/For-best-results!.2477654019.html#Forbestresults!-Enhanceend-userexperience!' target='_blank'>Web Form 2.0 Public Documentation</a>.", alias="redirectUrl")
    allow_test_bank: Optional[StrictBool] = Field(default=True, description="Whether the bank search will include the test banks in the search results. When set to false, all test banks will be excluded from the bank search results.", alias="allowTestBank")
    __properties: ClassVar[List[str]] = ["bank", "bankConnectionName", "skipBalancesDownload", "skipPositionsDownload", "loadOwnerData", "maxDaysForDownload", "accountTypes", "allowedInterfaces", "callbacks", "profileId", "redirectUrl", "allowTestBank"]

    @field_validator('allowed_interfaces')
    def allowed_interfaces_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['XS2A', 'FINTS_SERVER', 'WEB_SCRAPER']):
                raise ValueError("each list item must be one of ('XS2A', 'FINTS_SERVER', 'WEB_SCRAPER')")
        return value

    @field_validator('redirect_url')
    def redirect_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"https:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9()@:%_+.~#?&\/=]*)", value):
            raise ValueError(r"must validate the regular expression /https:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9()@:%_+.~#?&\/=]*)/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankConnectionImportDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bank
        if self.bank:
            _dict['bank'] = self.bank.to_dict()
        # override the default output from pydantic by calling `to_dict()` of callbacks
        if self.callbacks:
            _dict['callbacks'] = self.callbacks.to_dict()
        # set to None if bank (nullable) is None
        # and model_fields_set contains the field
        if self.bank is None and "bank" in self.model_fields_set:
            _dict['bank'] = None

        # set to None if bank_connection_name (nullable) is None
        # and model_fields_set contains the field
        if self.bank_connection_name is None and "bank_connection_name" in self.model_fields_set:
            _dict['bankConnectionName'] = None

        # set to None if skip_balances_download (nullable) is None
        # and model_fields_set contains the field
        if self.skip_balances_download is None and "skip_balances_download" in self.model_fields_set:
            _dict['skipBalancesDownload'] = None

        # set to None if skip_positions_download (nullable) is None
        # and model_fields_set contains the field
        if self.skip_positions_download is None and "skip_positions_download" in self.model_fields_set:
            _dict['skipPositionsDownload'] = None

        # set to None if load_owner_data (nullable) is None
        # and model_fields_set contains the field
        if self.load_owner_data is None and "load_owner_data" in self.model_fields_set:
            _dict['loadOwnerData'] = None

        # set to None if max_days_for_download (nullable) is None
        # and model_fields_set contains the field
        if self.max_days_for_download is None and "max_days_for_download" in self.model_fields_set:
            _dict['maxDaysForDownload'] = None

        # set to None if account_types (nullable) is None
        # and model_fields_set contains the field
        if self.account_types is None and "account_types" in self.model_fields_set:
            _dict['accountTypes'] = None

        # set to None if allowed_interfaces (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_interfaces is None and "allowed_interfaces" in self.model_fields_set:
            _dict['allowedInterfaces'] = None

        # set to None if callbacks (nullable) is None
        # and model_fields_set contains the field
        if self.callbacks is None and "callbacks" in self.model_fields_set:
            _dict['callbacks'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profileId'] = None

        # set to None if redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_url is None and "redirect_url" in self.model_fields_set:
            _dict['redirectUrl'] = None

        # set to None if allow_test_bank (nullable) is None
        # and model_fields_set contains the field
        if self.allow_test_bank is None and "allow_test_bank" in self.model_fields_set:
            _dict['allowTestBank'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankConnectionImportDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bank": ImportBankDetails.from_dict(obj["bank"]) if obj.get("bank") is not None else None,
            "bankConnectionName": obj.get("bankConnectionName"),
            "skipBalancesDownload": obj.get("skipBalancesDownload") if obj.get("skipBalancesDownload") is not None else False,
            "skipPositionsDownload": obj.get("skipPositionsDownload") if obj.get("skipPositionsDownload") is not None else False,
            "loadOwnerData": obj.get("loadOwnerData") if obj.get("loadOwnerData") is not None else False,
            "maxDaysForDownload": obj.get("maxDaysForDownload") if obj.get("maxDaysForDownload") is not None else 0,
            "accountTypes": obj.get("accountTypes"),
            "allowedInterfaces": obj.get("allowedInterfaces"),
            "callbacks": Callbacks.from_dict(obj["callbacks"]) if obj.get("callbacks") is not None else None,
            "profileId": obj.get("profileId"),
            "redirectUrl": obj.get("redirectUrl"),
            "allowTestBank": obj.get("allowTestBank") if obj.get("allowTestBank") is not None else True
        })
        return _obj


