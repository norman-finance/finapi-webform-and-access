# coding: utf-8

"""
    finAPI Web Form 2.0

    The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

    The version of the OpenAPI document: 2.709.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from finapi_web_form.models.account_type import AccountType
from finapi_web_form.models.manage_saved_settings import ManageSavedSettings
from finapi_web_form.models.task_callbacks import TaskCallbacks
from finapi_web_form.models.user_metadata import UserMetadata
from typing import Optional, Set
from typing_extensions import Self

class BankConnectionUpdateTaskDetails(BaseModel):
    """
    BankConnectionUpdateTaskDetails
    """ # noqa: E501
    bank_connection_id: StrictInt = Field(description="Bank connection identifier.", alias="bankConnectionId")
    import_new_accounts: Optional[StrictBool] = Field(default=False, description="Whether new accounts that have not yet been imported will be imported or not.<br/><br/>By setting this parameter to true, we will try to get new accounts the user might have at the bank. The user will have a possibility to stop the process once he finds the accounts he is interested in have been imported. The set of newly imported accounts can be limited by using \"accountTypes\" parameter.<br/><br/><strong>NOTE:</strong> This parameter is deprecated. Please use <code>importNewAccountsMode</code> in the future. Not setting or setting this parameter to <code>false</code> is the same as not setting or setting <code>importNewAccountsMode=SKIP</code>. Setting this parameter to <code>true</code> is the same as setting <code>importNewAccountsMode=CONDITIONAL</code>.", alias="importNewAccounts")
    import_new_accounts_mode: Optional[StrictStr] = Field(description="This parameter defines how we should deal with new accounts that the user might have at the bank but which have not gotten imported yet.<br/>The user will be able to stop the process once he finds his relevant accounts imported. The set of newly imported accounts can get limited also by using the \"accountTypes\" parameter.<br/><br/><strong>Import new accounts mode:</strong><br/>&bull; <code>SKIP</code> - no new accounts will get imported;<br/>&bull; <code>CONDITIONAL</code> -  For the <code>XS2A</code> interface new accounts will get imported only if the stored consent supports this capability (see: <code>consent.supportsImportNewAccounts = true</code> in Access). For the other interfaces, new accounts will always get imported.<br/>&bull; <code>FORCED</code> - For the <code>XS2A</code> interface, the stored consent will get deleted before the update is triggered, in case it doesn't support importing new accounts. For the other interfaces, new accounts will always get imported.<br/><br/><strong>NOTE:</strong> No matter the option chosen, a web form can still be generated in the background.", alias="importNewAccountsMode")
    account_types: Optional[List[AccountType]] = Field(default=None, description="It defines the account types to be added on the bank connection. If no value is given, then all new available accounts will be imported.<br/>Ignored if <code>importNewAccountsMode=SKIP</code> or <code>importNewAccounts</code> is set to false and active otherwise.<br/>This parameter refers to the same parameters of \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/update'>Update a bank connection</a>\" and \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/connectInterface'>Connect a new interface</a>\" services in the finAPI Access API.", alias="accountTypes")
    allowed_interfaces: Optional[List[StrictStr]] = Field(default=None, description="Restricts the set of interfaces the end user can update and/or connect with the web form: if given, only these interfaces will be updated or considered for offering to the end user to connect (if connecting new interfaces is requested by the `importNewAccountsMode` parameter), as if other interfaces wouldn't exist for the given bank connection and the linked bank.  Please note that if interfaces already connected to the bank connection are filtered out after applying this parameter and there are still interfaces that can be connected, the web form will immediately start in the \"connect\" mode, without asking the end user whether the connection should take place (comparing to the flow when no `allowedInterfaces` is provided).  For example, if the bank connection already has `XS2A` interface connected, and you call this service with the `allowedInterfaces` set to `FINTS_SERVER`, the web form - once opened by the end user - will immediately start with connecting the `FINTS_SERVER` interface (assuming `FINTS_SERVER` is supported by the linked bank).", alias="allowedInterfaces")
    skip_balances_download: Optional[StrictBool] = Field(default=False, description="Whether to skip the download of balances or not. May only be set to true if <code>skipPositionsDownload</code> is also true. <br/>This parameter refers to the same parameters of \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/update'>Update a bank connection</a>\" and \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/connectInterface'>Connect a new interface</a>\" services in the finAPI Access API.", alias="skipBalancesDownload")
    skip_positions_download: Optional[StrictBool] = Field(default=False, description="Whether to skip the download of transactions and securities or not.<br/>This parameter refers to the same parameters of \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/update'>Update a bank connection</a>\" and \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/connectInterface'>Connect a new interface</a>\" services in the finAPI Access API.", alias="skipPositionsDownload")
    load_owner_data: Optional[StrictBool] = Field(default=False, description="Whether to load information about the bank connection owner(s).<br/>This parameter refers to the same parameters of \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/update'>Update a bank connection</a>\" and \"<a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/v1/bankConnections/connectInterface'>Connect a new interface</a>\" services in the finAPI Access API.<br/><strong>NOTE:</strong> This feature is supported only by the WEB_SCRAPER interface.", alias="loadOwnerData")
    manage_saved_settings: Optional[List[ManageSavedSettings]] = Field(default=None, description="If users have stored bank credentials or their preferred SCA procedure in finAPI, then each time it is necessary, the web form will automatically apply the saved settings. This field will force the web form to be presented. Depending on the value you provide in the API, the end-user will have the possibility to provide new credentials, decide if he wants to store the new credentials in finAPI or delete the stored SCA procedure. He might also be able to save a different SCA procedure as preference if the workflow requires it. Use this parameter, for example, if a previous update failed because of invalid credentials, or you want to allow the end-user to reset his preferred SCA method.<br/><br/><strong>Manage saved settings:</strong><br/>&bull; <code>CREDENTIALS</code> - the end user can edit his stored credentials;<br/>&bull; <code>DEFAULT_TWO_STEP_PROCEDURE</code> - the end user can edit his stored default two step procedure.", alias="manageSavedSettings")
    callbacks: Optional[TaskCallbacks] = None
    profile_id: Optional[Annotated[str, Field(min_length=36, strict=True, max_length=36)]] = Field(default=None, description="The profile to be applied to the web form.<br/>This will overwrite the default profile, if such a profile exists.", alias="profileId")
    redirect_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2048)]] = Field(default=None, description="The URL where the end-user will be redirected to after completing the bank login and (possibly) the SCA on the bank's website. Must always be provided by mandators with <code>FULLY_LICENSED</code> or <code>AISP</code> license type, and may not be provided by mandators with other license types. Find more info in the <a target='_blank' href='https://documentation.finapi.io/webform/Licensed-customers-using-the-Web-Form.2832302195.html'>Web Form 2.0 Public Documentation</a>.<br/><br/><strong>NOTE:</strong> Please note that this URL is used during the bank authentication flow. If you would like to provide a URL to which the end user will get redirected at the <strong>end of the web form flow</strong>, please check out the <a href='https://documentation.finapi.io/webform/For-best-results!.2477654019.html#Forbestresults!-Enhanceend-userexperience!' target='_blank'>Web Form 2.0 Public Documentation</a>.", alias="redirectUrl")
    user_metadata: Optional[UserMetadata] = Field(default=None, alias="userMetadata")
    __properties: ClassVar[List[str]] = ["bankConnectionId", "importNewAccounts", "importNewAccountsMode", "accountTypes", "allowedInterfaces", "skipBalancesDownload", "skipPositionsDownload", "loadOwnerData", "manageSavedSettings", "callbacks", "profileId", "redirectUrl", "userMetadata"]

    @field_validator('import_new_accounts_mode')
    def import_new_accounts_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SKIP', 'CONDITIONAL', 'FORCED']):
            raise ValueError("must be one of enum values ('SKIP', 'CONDITIONAL', 'FORCED')")
        return value

    @field_validator('allowed_interfaces')
    def allowed_interfaces_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['XS2A', 'FINTS_SERVER', 'WEB_SCRAPER']):
                raise ValueError("each list item must be one of ('XS2A', 'FINTS_SERVER', 'WEB_SCRAPER')")
        return value

    @field_validator('redirect_url')
    def redirect_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"https:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9()@:%_+.~#?&\/=]*)", value):
            raise ValueError(r"must validate the regular expression /https:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9()@:%_+.~#?&\/=]*)/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankConnectionUpdateTaskDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of callbacks
        if self.callbacks:
            _dict['callbacks'] = self.callbacks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_metadata
        if self.user_metadata:
            _dict['userMetadata'] = self.user_metadata.to_dict()
        # set to None if import_new_accounts (nullable) is None
        # and model_fields_set contains the field
        if self.import_new_accounts is None and "import_new_accounts" in self.model_fields_set:
            _dict['importNewAccounts'] = None

        # set to None if import_new_accounts_mode (nullable) is None
        # and model_fields_set contains the field
        if self.import_new_accounts_mode is None and "import_new_accounts_mode" in self.model_fields_set:
            _dict['importNewAccountsMode'] = None

        # set to None if account_types (nullable) is None
        # and model_fields_set contains the field
        if self.account_types is None and "account_types" in self.model_fields_set:
            _dict['accountTypes'] = None

        # set to None if allowed_interfaces (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_interfaces is None and "allowed_interfaces" in self.model_fields_set:
            _dict['allowedInterfaces'] = None

        # set to None if skip_balances_download (nullable) is None
        # and model_fields_set contains the field
        if self.skip_balances_download is None and "skip_balances_download" in self.model_fields_set:
            _dict['skipBalancesDownload'] = None

        # set to None if skip_positions_download (nullable) is None
        # and model_fields_set contains the field
        if self.skip_positions_download is None and "skip_positions_download" in self.model_fields_set:
            _dict['skipPositionsDownload'] = None

        # set to None if load_owner_data (nullable) is None
        # and model_fields_set contains the field
        if self.load_owner_data is None and "load_owner_data" in self.model_fields_set:
            _dict['loadOwnerData'] = None

        # set to None if manage_saved_settings (nullable) is None
        # and model_fields_set contains the field
        if self.manage_saved_settings is None and "manage_saved_settings" in self.model_fields_set:
            _dict['manageSavedSettings'] = None

        # set to None if callbacks (nullable) is None
        # and model_fields_set contains the field
        if self.callbacks is None and "callbacks" in self.model_fields_set:
            _dict['callbacks'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profileId'] = None

        # set to None if redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_url is None and "redirect_url" in self.model_fields_set:
            _dict['redirectUrl'] = None

        # set to None if user_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.user_metadata is None and "user_metadata" in self.model_fields_set:
            _dict['userMetadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankConnectionUpdateTaskDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bankConnectionId": obj.get("bankConnectionId"),
            "importNewAccounts": obj.get("importNewAccounts") if obj.get("importNewAccounts") is not None else False,
            "importNewAccountsMode": obj.get("importNewAccountsMode") if obj.get("importNewAccountsMode") is not None else 'SKIP',
            "accountTypes": obj.get("accountTypes"),
            "allowedInterfaces": obj.get("allowedInterfaces"),
            "skipBalancesDownload": obj.get("skipBalancesDownload") if obj.get("skipBalancesDownload") is not None else False,
            "skipPositionsDownload": obj.get("skipPositionsDownload") if obj.get("skipPositionsDownload") is not None else False,
            "loadOwnerData": obj.get("loadOwnerData") if obj.get("loadOwnerData") is not None else False,
            "manageSavedSettings": obj.get("manageSavedSettings"),
            "callbacks": TaskCallbacks.from_dict(obj["callbacks"]) if obj.get("callbacks") is not None else None,
            "profileId": obj.get("profileId"),
            "redirectUrl": obj.get("redirectUrl"),
            "userMetadata": UserMetadata.from_dict(obj["userMetadata"]) if obj.get("userMetadata") is not None else None
        })
        return _obj


